// Code generated by 'yaegi extract gioui.org/widget/material'. DO NOT EDIT.

package giopkgs

import (
	"gioui.org/widget/material"
	"reflect"
)

func init() {
	Symbols["gioui.org/widget/material"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Body1":        reflect.ValueOf(material.Body1),
		"Body2":        reflect.ValueOf(material.Body2),
		"Button":       reflect.ValueOf(material.Button),
		"ButtonLayout": reflect.ValueOf(material.ButtonLayout),
		"Caption":      reflect.ValueOf(material.Caption),
		"CheckBox":     reflect.ValueOf(material.CheckBox),
		"Clickable":    reflect.ValueOf(material.Clickable),
		"Editor":       reflect.ValueOf(material.Editor),
		"H1":           reflect.ValueOf(material.H1),
		"H2":           reflect.ValueOf(material.H2),
		"H3":           reflect.ValueOf(material.H3),
		"H4":           reflect.ValueOf(material.H4),
		"H5":           reflect.ValueOf(material.H5),
		"H6":           reflect.ValueOf(material.H6),
		"IconButton":   reflect.ValueOf(material.IconButton),
		"Label":        reflect.ValueOf(material.Label),
		"Loader":       reflect.ValueOf(material.Loader),
		"NewTheme":     reflect.ValueOf(material.NewTheme),
		"ProgressBar":  reflect.ValueOf(material.ProgressBar),
		"RadioButton":  reflect.ValueOf(material.RadioButton),
		"Slider":       reflect.ValueOf(material.Slider),
		"Switch":       reflect.ValueOf(material.Switch),

		// type definitions
		"ButtonLayoutStyle": reflect.ValueOf((*material.ButtonLayoutStyle)(nil)),
		"ButtonStyle":       reflect.ValueOf((*material.ButtonStyle)(nil)),
		"CheckBoxStyle":     reflect.ValueOf((*material.CheckBoxStyle)(nil)),
		"EditorStyle":       reflect.ValueOf((*material.EditorStyle)(nil)),
		"IconButtonStyle":   reflect.ValueOf((*material.IconButtonStyle)(nil)),
		"LabelStyle":        reflect.ValueOf((*material.LabelStyle)(nil)),
		"LoaderStyle":       reflect.ValueOf((*material.LoaderStyle)(nil)),
		"Palette":           reflect.ValueOf((*material.Palette)(nil)),
		"ProgressBarStyle":  reflect.ValueOf((*material.ProgressBarStyle)(nil)),
		"RadioButtonStyle":  reflect.ValueOf((*material.RadioButtonStyle)(nil)),
		"SliderStyle":       reflect.ValueOf((*material.SliderStyle)(nil)),
		"SwitchStyle":       reflect.ValueOf((*material.SwitchStyle)(nil)),
		"Theme":             reflect.ValueOf((*material.Theme)(nil)),
	}
}
