// Code generated by 'yaegi extract gioui.org/layout'. DO NOT EDIT.

package giopkgs

import (
	"gioui.org/layout"
	"reflect"
)

func init() {
	Symbols["gioui.org/layout"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Baseline":     reflect.ValueOf(layout.Baseline),
		"Center":       reflect.ValueOf(layout.Center),
		"E":            reflect.ValueOf(layout.E),
		"End":          reflect.ValueOf(layout.End),
		"Exact":        reflect.ValueOf(layout.Exact),
		"Expanded":     reflect.ValueOf(layout.Expanded),
		"FPt":          reflect.ValueOf(layout.FPt),
		"FRect":        reflect.ValueOf(layout.FRect),
		"Flexed":       reflect.ValueOf(layout.Flexed),
		"Horizontal":   reflect.ValueOf(layout.Horizontal),
		"Middle":       reflect.ValueOf(layout.Middle),
		"N":            reflect.ValueOf(layout.N),
		"NE":           reflect.ValueOf(layout.NE),
		"NW":           reflect.ValueOf(layout.NW),
		"NewContext":   reflect.ValueOf(layout.NewContext),
		"Rigid":        reflect.ValueOf(layout.Rigid),
		"S":            reflect.ValueOf(layout.S),
		"SE":           reflect.ValueOf(layout.SE),
		"SW":           reflect.ValueOf(layout.SW),
		"SpaceAround":  reflect.ValueOf(layout.SpaceAround),
		"SpaceBetween": reflect.ValueOf(layout.SpaceBetween),
		"SpaceEnd":     reflect.ValueOf(layout.SpaceEnd),
		"SpaceEvenly":  reflect.ValueOf(layout.SpaceEvenly),
		"SpaceSides":   reflect.ValueOf(layout.SpaceSides),
		"SpaceStart":   reflect.ValueOf(layout.SpaceStart),
		"Stacked":      reflect.ValueOf(layout.Stacked),
		"Start":        reflect.ValueOf(layout.Start),
		"UniformInset": reflect.ValueOf(layout.UniformInset),
		"Vertical":     reflect.ValueOf(layout.Vertical),
		"W":            reflect.ValueOf(layout.W),

		// type definitions
		"Alignment":   reflect.ValueOf((*layout.Alignment)(nil)),
		"Axis":        reflect.ValueOf((*layout.Axis)(nil)),
		"Constraints": reflect.ValueOf((*layout.Constraints)(nil)),
		"Context":     reflect.ValueOf((*layout.Context)(nil)),
		"Dimensions":  reflect.ValueOf((*layout.Dimensions)(nil)),
		"Direction":   reflect.ValueOf((*layout.Direction)(nil)),
		"Flex":        reflect.ValueOf((*layout.Flex)(nil)),
		"FlexChild":   reflect.ValueOf((*layout.FlexChild)(nil)),
		"Inset":       reflect.ValueOf((*layout.Inset)(nil)),
		"List":        reflect.ValueOf((*layout.List)(nil)),
		"ListElement": reflect.ValueOf((*layout.ListElement)(nil)),
		"Position":    reflect.ValueOf((*layout.Position)(nil)),
		"Spacer":      reflect.ValueOf((*layout.Spacer)(nil)),
		"Spacing":     reflect.ValueOf((*layout.Spacing)(nil)),
		"Stack":       reflect.ValueOf((*layout.Stack)(nil)),
		"StackChild":  reflect.ValueOf((*layout.StackChild)(nil)),
		"Widget":      reflect.ValueOf((*layout.Widget)(nil)),
	}
}
