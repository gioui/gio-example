// Code generated by 'yaegi extract gioui.org/gpu/backend'. DO NOT EDIT.

package giopkgs

import (
	"gioui.org/gpu/backend"
	"image"
	"reflect"
	"time"
)

func init() {
	Symbols["gioui.org/gpu/backend"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AccessRead":                  reflect.ValueOf(backend.AccessRead),
		"AccessWrite":                 reflect.ValueOf(backend.AccessWrite),
		"BlendFactorDstColor":         reflect.ValueOf(backend.BlendFactorDstColor),
		"BlendFactorOne":              reflect.ValueOf(backend.BlendFactorOne),
		"BlendFactorOneMinusSrcAlpha": reflect.ValueOf(backend.BlendFactorOneMinusSrcAlpha),
		"BlendFactorZero":             reflect.ValueOf(backend.BlendFactorZero),
		"BufferBindingFramebuffer":    reflect.ValueOf(backend.BufferBindingFramebuffer),
		"BufferBindingIndices":        reflect.ValueOf(backend.BufferBindingIndices),
		"BufferBindingShaderStorage":  reflect.ValueOf(backend.BufferBindingShaderStorage),
		"BufferBindingTexture":        reflect.ValueOf(backend.BufferBindingTexture),
		"BufferBindingUniforms":       reflect.ValueOf(backend.BufferBindingUniforms),
		"BufferBindingVertices":       reflect.ValueOf(backend.BufferBindingVertices),
		"DataTypeFloat":               reflect.ValueOf(backend.DataTypeFloat),
		"DataTypeInt":                 reflect.ValueOf(backend.DataTypeInt),
		"DataTypeShort":               reflect.ValueOf(backend.DataTypeShort),
		"DepthFuncGreater":            reflect.ValueOf(backend.DepthFuncGreater),
		"DepthFuncGreaterEqual":       reflect.ValueOf(backend.DepthFuncGreaterEqual),
		"DrawModeTriangleStrip":       reflect.ValueOf(backend.DrawModeTriangleStrip),
		"DrawModeTriangles":           reflect.ValueOf(backend.DrawModeTriangles),
		"FeatureCompute":              reflect.ValueOf(backend.FeatureCompute),
		"FeatureFloatRenderTargets":   reflect.ValueOf(backend.FeatureFloatRenderTargets),
		"FeatureTimers":               reflect.ValueOf(backend.FeatureTimers),
		"FilterLinear":                reflect.ValueOf(backend.FilterLinear),
		"FilterNearest":               reflect.ValueOf(backend.FilterNearest),
		"TextureFormatFloat":          reflect.ValueOf(backend.TextureFormatFloat),
		"TextureFormatRGBA8":          reflect.ValueOf(backend.TextureFormatRGBA8),
		"TextureFormatSRGB":           reflect.ValueOf(backend.TextureFormatSRGB),
		"UploadImage":                 reflect.ValueOf(backend.UploadImage),

		// type definitions
		"AccessBits":           reflect.ValueOf((*backend.AccessBits)(nil)),
		"BlendFactor":          reflect.ValueOf((*backend.BlendFactor)(nil)),
		"Buffer":               reflect.ValueOf((*backend.Buffer)(nil)),
		"BufferBinding":        reflect.ValueOf((*backend.BufferBinding)(nil)),
		"Caps":                 reflect.ValueOf((*backend.Caps)(nil)),
		"DataType":             reflect.ValueOf((*backend.DataType)(nil)),
		"DepthFunc":            reflect.ValueOf((*backend.DepthFunc)(nil)),
		"Device":               reflect.ValueOf((*backend.Device)(nil)),
		"DrawMode":             reflect.ValueOf((*backend.DrawMode)(nil)),
		"Features":             reflect.ValueOf((*backend.Features)(nil)),
		"Framebuffer":          reflect.ValueOf((*backend.Framebuffer)(nil)),
		"InputDesc":            reflect.ValueOf((*backend.InputDesc)(nil)),
		"InputLayout":          reflect.ValueOf((*backend.InputLayout)(nil)),
		"InputLocation":        reflect.ValueOf((*backend.InputLocation)(nil)),
		"Program":              reflect.ValueOf((*backend.Program)(nil)),
		"ShaderSources":        reflect.ValueOf((*backend.ShaderSources)(nil)),
		"StorageBufferBinding": reflect.ValueOf((*backend.StorageBufferBinding)(nil)),
		"Texture":              reflect.ValueOf((*backend.Texture)(nil)),
		"TextureBinding":       reflect.ValueOf((*backend.TextureBinding)(nil)),
		"TextureFilter":        reflect.ValueOf((*backend.TextureFilter)(nil)),
		"TextureFormat":        reflect.ValueOf((*backend.TextureFormat)(nil)),
		"Timer":                reflect.ValueOf((*backend.Timer)(nil)),
		"UniformBlock":         reflect.ValueOf((*backend.UniformBlock)(nil)),
		"UniformLocation":      reflect.ValueOf((*backend.UniformLocation)(nil)),
		"UniformsReflection":   reflect.ValueOf((*backend.UniformsReflection)(nil)),

		// interface wrapper definitions
		"_Buffer":      reflect.ValueOf((*_gioui_org_gpu_backend_Buffer)(nil)),
		"_Device":      reflect.ValueOf((*_gioui_org_gpu_backend_Device)(nil)),
		"_Framebuffer": reflect.ValueOf((*_gioui_org_gpu_backend_Framebuffer)(nil)),
		"_InputLayout": reflect.ValueOf((*_gioui_org_gpu_backend_InputLayout)(nil)),
		"_Program":     reflect.ValueOf((*_gioui_org_gpu_backend_Program)(nil)),
		"_Texture":     reflect.ValueOf((*_gioui_org_gpu_backend_Texture)(nil)),
		"_Timer":       reflect.ValueOf((*_gioui_org_gpu_backend_Timer)(nil)),
	}
}

// _gioui_org_gpu_backend_Buffer is an interface wrapper for Buffer type
type _gioui_org_gpu_backend_Buffer struct {
	WDownload func(data []byte) error
	WRelease  func()
	WUpload   func(data []byte)
}

func (W _gioui_org_gpu_backend_Buffer) Download(data []byte) error { return W.WDownload(data) }
func (W _gioui_org_gpu_backend_Buffer) Release()                   { W.WRelease() }
func (W _gioui_org_gpu_backend_Buffer) Upload(data []byte)         { W.WUpload(data) }

// _gioui_org_gpu_backend_Device is an interface wrapper for Device type
type _gioui_org_gpu_backend_Device struct {
	WBeginFrame         func()
	WBindFramebuffer    func(f backend.Framebuffer)
	WBindImageTexture   func(unit int, texture backend.Texture, access backend.AccessBits, format backend.TextureFormat)
	WBindIndexBuffer    func(b backend.Buffer)
	WBindInputLayout    func(i backend.InputLayout)
	WBindProgram        func(p backend.Program)
	WBindTexture        func(unit int, t backend.Texture)
	WBindVertexBuffer   func(b backend.Buffer, stride int, offset int)
	WBlendFunc          func(sfactor backend.BlendFactor, dfactor backend.BlendFactor)
	WCaps               func() backend.Caps
	WClear              func(r float32, g float32, b float32, a float32)
	WClearDepth         func(d float32)
	WCurrentFramebuffer func() backend.Framebuffer
	WDepthFunc          func(f backend.DepthFunc)
	WDepthMask          func(mask bool)
	WDispatchCompute    func(x int, y int, z int)
	WDrawArrays         func(mode backend.DrawMode, off int, count int)
	WDrawElements       func(mode backend.DrawMode, off int, count int)
	WEndFrame           func()
	WIsTimeContinuous   func() bool
	WMemoryBarrier      func()
	WNewBuffer          func(typ backend.BufferBinding, size int) (backend.Buffer, error)
	WNewComputeProgram  func(shader backend.ShaderSources) (backend.Program, error)
	WNewFramebuffer     func(tex backend.Texture, depthBits int) (backend.Framebuffer, error)
	WNewImmutableBuffer func(typ backend.BufferBinding, data []byte) (backend.Buffer, error)
	WNewInputLayout     func(vertexShader backend.ShaderSources, layout []backend.InputDesc) (backend.InputLayout, error)
	WNewProgram         func(vertexShader backend.ShaderSources, fragmentShader backend.ShaderSources) (backend.Program, error)
	WNewTexture         func(format backend.TextureFormat, width int, height int, minFilter backend.TextureFilter, magFilter backend.TextureFilter, bindings backend.BufferBinding) (backend.Texture, error)
	WNewTimer           func() backend.Timer
	WSetBlend           func(enable bool)
	WSetDepthTest       func(enable bool)
	WViewport           func(x int, y int, width int, height int)
}

func (W _gioui_org_gpu_backend_Device) BeginFrame()                           { W.WBeginFrame() }
func (W _gioui_org_gpu_backend_Device) BindFramebuffer(f backend.Framebuffer) { W.WBindFramebuffer(f) }
func (W _gioui_org_gpu_backend_Device) BindImageTexture(unit int, texture backend.Texture, access backend.AccessBits, format backend.TextureFormat) {
	W.WBindImageTexture(unit, texture, access, format)
}
func (W _gioui_org_gpu_backend_Device) BindIndexBuffer(b backend.Buffer)      { W.WBindIndexBuffer(b) }
func (W _gioui_org_gpu_backend_Device) BindInputLayout(i backend.InputLayout) { W.WBindInputLayout(i) }
func (W _gioui_org_gpu_backend_Device) BindProgram(p backend.Program)         { W.WBindProgram(p) }
func (W _gioui_org_gpu_backend_Device) BindTexture(unit int, t backend.Texture) {
	W.WBindTexture(unit, t)
}
func (W _gioui_org_gpu_backend_Device) BindVertexBuffer(b backend.Buffer, stride int, offset int) {
	W.WBindVertexBuffer(b, stride, offset)
}
func (W _gioui_org_gpu_backend_Device) BlendFunc(sfactor backend.BlendFactor, dfactor backend.BlendFactor) {
	W.WBlendFunc(sfactor, dfactor)
}
func (W _gioui_org_gpu_backend_Device) Caps() backend.Caps { return W.WCaps() }
func (W _gioui_org_gpu_backend_Device) Clear(r float32, g float32, b float32, a float32) {
	W.WClear(r, g, b, a)
}
func (W _gioui_org_gpu_backend_Device) ClearDepth(d float32) { W.WClearDepth(d) }
func (W _gioui_org_gpu_backend_Device) CurrentFramebuffer() backend.Framebuffer {
	return W.WCurrentFramebuffer()
}
func (W _gioui_org_gpu_backend_Device) DepthFunc(f backend.DepthFunc) { W.WDepthFunc(f) }
func (W _gioui_org_gpu_backend_Device) DepthMask(mask bool)           { W.WDepthMask(mask) }
func (W _gioui_org_gpu_backend_Device) DispatchCompute(x int, y int, z int) {
	W.WDispatchCompute(x, y, z)
}
func (W _gioui_org_gpu_backend_Device) DrawArrays(mode backend.DrawMode, off int, count int) {
	W.WDrawArrays(mode, off, count)
}
func (W _gioui_org_gpu_backend_Device) DrawElements(mode backend.DrawMode, off int, count int) {
	W.WDrawElements(mode, off, count)
}
func (W _gioui_org_gpu_backend_Device) EndFrame()              { W.WEndFrame() }
func (W _gioui_org_gpu_backend_Device) IsTimeContinuous() bool { return W.WIsTimeContinuous() }
func (W _gioui_org_gpu_backend_Device) MemoryBarrier()         { W.WMemoryBarrier() }
func (W _gioui_org_gpu_backend_Device) NewBuffer(typ backend.BufferBinding, size int) (backend.Buffer, error) {
	return W.WNewBuffer(typ, size)
}
func (W _gioui_org_gpu_backend_Device) NewComputeProgram(shader backend.ShaderSources) (backend.Program, error) {
	return W.WNewComputeProgram(shader)
}
func (W _gioui_org_gpu_backend_Device) NewFramebuffer(tex backend.Texture, depthBits int) (backend.Framebuffer, error) {
	return W.WNewFramebuffer(tex, depthBits)
}
func (W _gioui_org_gpu_backend_Device) NewImmutableBuffer(typ backend.BufferBinding, data []byte) (backend.Buffer, error) {
	return W.WNewImmutableBuffer(typ, data)
}
func (W _gioui_org_gpu_backend_Device) NewInputLayout(vertexShader backend.ShaderSources, layout []backend.InputDesc) (backend.InputLayout, error) {
	return W.WNewInputLayout(vertexShader, layout)
}
func (W _gioui_org_gpu_backend_Device) NewProgram(vertexShader backend.ShaderSources, fragmentShader backend.ShaderSources) (backend.Program, error) {
	return W.WNewProgram(vertexShader, fragmentShader)
}
func (W _gioui_org_gpu_backend_Device) NewTexture(format backend.TextureFormat, width int, height int, minFilter backend.TextureFilter, magFilter backend.TextureFilter, bindings backend.BufferBinding) (backend.Texture, error) {
	return W.WNewTexture(format, width, height, minFilter, magFilter, bindings)
}
func (W _gioui_org_gpu_backend_Device) NewTimer() backend.Timer  { return W.WNewTimer() }
func (W _gioui_org_gpu_backend_Device) SetBlend(enable bool)     { W.WSetBlend(enable) }
func (W _gioui_org_gpu_backend_Device) SetDepthTest(enable bool) { W.WSetDepthTest(enable) }
func (W _gioui_org_gpu_backend_Device) Viewport(x int, y int, width int, height int) {
	W.WViewport(x, y, width, height)
}

// _gioui_org_gpu_backend_Framebuffer is an interface wrapper for Framebuffer type
type _gioui_org_gpu_backend_Framebuffer struct {
	WInvalidate func()
	WReadPixels func(src image.Rectangle, pixels []byte) error
	WRelease    func()
}

func (W _gioui_org_gpu_backend_Framebuffer) Invalidate() { W.WInvalidate() }
func (W _gioui_org_gpu_backend_Framebuffer) ReadPixels(src image.Rectangle, pixels []byte) error {
	return W.WReadPixels(src, pixels)
}
func (W _gioui_org_gpu_backend_Framebuffer) Release() { W.WRelease() }

// _gioui_org_gpu_backend_InputLayout is an interface wrapper for InputLayout type
type _gioui_org_gpu_backend_InputLayout struct {
	WRelease func()
}

func (W _gioui_org_gpu_backend_InputLayout) Release() { W.WRelease() }

// _gioui_org_gpu_backend_Program is an interface wrapper for Program type
type _gioui_org_gpu_backend_Program struct {
	WRelease             func()
	WSetFragmentUniforms func(buf backend.Buffer)
	WSetStorageBuffer    func(binding int, buf backend.Buffer)
	WSetVertexUniforms   func(buf backend.Buffer)
}

func (W _gioui_org_gpu_backend_Program) Release() { W.WRelease() }
func (W _gioui_org_gpu_backend_Program) SetFragmentUniforms(buf backend.Buffer) {
	W.WSetFragmentUniforms(buf)
}
func (W _gioui_org_gpu_backend_Program) SetStorageBuffer(binding int, buf backend.Buffer) {
	W.WSetStorageBuffer(binding, buf)
}
func (W _gioui_org_gpu_backend_Program) SetVertexUniforms(buf backend.Buffer) {
	W.WSetVertexUniforms(buf)
}

// _gioui_org_gpu_backend_Texture is an interface wrapper for Texture type
type _gioui_org_gpu_backend_Texture struct {
	WRelease func()
	WUpload  func(offset image.Point, size image.Point, pixels []byte)
}

func (W _gioui_org_gpu_backend_Texture) Release() { W.WRelease() }
func (W _gioui_org_gpu_backend_Texture) Upload(offset image.Point, size image.Point, pixels []byte) {
	W.WUpload(offset, size, pixels)
}

// _gioui_org_gpu_backend_Timer is an interface wrapper for Timer type
type _gioui_org_gpu_backend_Timer struct {
	WBegin    func()
	WDuration func() (time.Duration, bool)
	WEnd      func()
	WRelease  func()
}

func (W _gioui_org_gpu_backend_Timer) Begin()                          { W.WBegin() }
func (W _gioui_org_gpu_backend_Timer) Duration() (time.Duration, bool) { return W.WDuration() }
func (W _gioui_org_gpu_backend_Timer) End()                            { W.WEnd() }
func (W _gioui_org_gpu_backend_Timer) Release()                        { W.WRelease() }
