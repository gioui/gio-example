// Code generated by 'yaegi extract gioui.org/io/key'. DO NOT EDIT.

package giopkgs

import (
	"gioui.org/io/key"
	"go/constant"
	"go/token"
	"reflect"
)

func init() {
	Symbols["gioui.org/io/key"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"ModAlt":             reflect.ValueOf(key.ModAlt),
		"ModCommand":         reflect.ValueOf(key.ModCommand),
		"ModCtrl":            reflect.ValueOf(key.ModCtrl),
		"ModShift":           reflect.ValueOf(key.ModShift),
		"ModShortcut":        reflect.ValueOf(key.ModShortcut),
		"ModSuper":           reflect.ValueOf(key.ModSuper),
		"NameDeleteBackward": reflect.ValueOf(constant.MakeFromLiteral("\"⌫\"", token.STRING, 0)),
		"NameDeleteForward":  reflect.ValueOf(constant.MakeFromLiteral("\"⌦\"", token.STRING, 0)),
		"NameDownArrow":      reflect.ValueOf(constant.MakeFromLiteral("\"↓\"", token.STRING, 0)),
		"NameEnd":            reflect.ValueOf(constant.MakeFromLiteral("\"⇲\"", token.STRING, 0)),
		"NameEnter":          reflect.ValueOf(constant.MakeFromLiteral("\"⌤\"", token.STRING, 0)),
		"NameEscape":         reflect.ValueOf(constant.MakeFromLiteral("\"⎋\"", token.STRING, 0)),
		"NameHome":           reflect.ValueOf(constant.MakeFromLiteral("\"⇱\"", token.STRING, 0)),
		"NameLeftArrow":      reflect.ValueOf(constant.MakeFromLiteral("\"←\"", token.STRING, 0)),
		"NamePageDown":       reflect.ValueOf(constant.MakeFromLiteral("\"⇟\"", token.STRING, 0)),
		"NamePageUp":         reflect.ValueOf(constant.MakeFromLiteral("\"⇞\"", token.STRING, 0)),
		"NameReturn":         reflect.ValueOf(constant.MakeFromLiteral("\"⏎\"", token.STRING, 0)),
		"NameRightArrow":     reflect.ValueOf(constant.MakeFromLiteral("\"→\"", token.STRING, 0)),
		"NameTab":            reflect.ValueOf(constant.MakeFromLiteral("\"⇥\"", token.STRING, 0)),
		"NameUpArrow":        reflect.ValueOf(constant.MakeFromLiteral("\"↑\"", token.STRING, 0)),
		"Press":              reflect.ValueOf(key.Press),
		"Release":            reflect.ValueOf(key.Release),

		// type definitions
		"EditEvent":      reflect.ValueOf((*key.EditEvent)(nil)),
		"Event":          reflect.ValueOf((*key.Event)(nil)),
		"FocusEvent":     reflect.ValueOf((*key.FocusEvent)(nil)),
		"FocusOp":        reflect.ValueOf((*key.FocusOp)(nil)),
		"InputOp":        reflect.ValueOf((*key.InputOp)(nil)),
		"Modifiers":      reflect.ValueOf((*key.Modifiers)(nil)),
		"SoftKeyboardOp": reflect.ValueOf((*key.SoftKeyboardOp)(nil)),
		"State":          reflect.ValueOf((*key.State)(nil)),
	}
}
