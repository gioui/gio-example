// Code generated by 'yaegi extract gioui.org/io/pointer'. DO NOT EDIT.

package giopkgs

import (
	"gioui.org/io/pointer"
	"reflect"
)

func init() {
	Symbols["gioui.org/io/pointer"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"ButtonLeft":      reflect.ValueOf(pointer.ButtonLeft),
		"ButtonMiddle":    reflect.ValueOf(pointer.ButtonMiddle),
		"ButtonRight":     reflect.ValueOf(pointer.ButtonRight),
		"Cancel":          reflect.ValueOf(pointer.Cancel),
		"CursorColResize": reflect.ValueOf(pointer.CursorColResize),
		"CursorCrossHair": reflect.ValueOf(pointer.CursorCrossHair),
		"CursorDefault":   reflect.ValueOf(pointer.CursorDefault),
		"CursorNone":      reflect.ValueOf(pointer.CursorNone),
		"CursorPointer":   reflect.ValueOf(pointer.CursorPointer),
		"CursorRowResize": reflect.ValueOf(pointer.CursorRowResize),
		"CursorText":      reflect.ValueOf(pointer.CursorText),
		"Drag":            reflect.ValueOf(pointer.Drag),
		"Ellipse":         reflect.ValueOf(pointer.Ellipse),
		"Enter":           reflect.ValueOf(pointer.Enter),
		"Foremost":        reflect.ValueOf(pointer.Foremost),
		"Grabbed":         reflect.ValueOf(pointer.Grabbed),
		"Leave":           reflect.ValueOf(pointer.Leave),
		"Mouse":           reflect.ValueOf(pointer.Mouse),
		"Move":            reflect.ValueOf(pointer.Move),
		"Press":           reflect.ValueOf(pointer.Press),
		"Rect":            reflect.ValueOf(pointer.Rect),
		"Release":         reflect.ValueOf(pointer.Release),
		"Scroll":          reflect.ValueOf(pointer.Scroll),
		"Shared":          reflect.ValueOf(pointer.Shared),
		"Touch":           reflect.ValueOf(pointer.Touch),

		// type definitions
		"AreaOp":       reflect.ValueOf((*pointer.AreaOp)(nil)),
		"Buttons":      reflect.ValueOf((*pointer.Buttons)(nil)),
		"CursorName":   reflect.ValueOf((*pointer.CursorName)(nil)),
		"CursorNameOp": reflect.ValueOf((*pointer.CursorNameOp)(nil)),
		"Event":        reflect.ValueOf((*pointer.Event)(nil)),
		"ID":           reflect.ValueOf((*pointer.ID)(nil)),
		"InputOp":      reflect.ValueOf((*pointer.InputOp)(nil)),
		"PassOp":       reflect.ValueOf((*pointer.PassOp)(nil)),
		"Priority":     reflect.ValueOf((*pointer.Priority)(nil)),
		"Source":       reflect.ValueOf((*pointer.Source)(nil)),
		"Type":         reflect.ValueOf((*pointer.Type)(nil)),
	}
}
